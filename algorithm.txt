HorseRace.cpp

GOALS: Race 5 horces 15 spaces and print the winner


INPUT: enter button to run each turn


OUTPUT: print track of each horse each turn and print winner when there is one


Steps:

main()

1. Create horses outside of main to be global array with 5 indexes all set to 0

2. Go through each horse (for i in horse[]
	a. decide if one or zero should be added to horses[i] by means on flipCoin()
	b. add result of flip coin to Horses[i]
	c. print the track of horses with printTrack()
		-pass in both i(horse youre printing) and the value at horses[i](place horse is


coinFlip()

GOALS: get a random number and if that is odd, return a 1 if it is even return a 0 


INPUT: none


OUTPUT: 0 or 1 


1. determine a random value of 1 or 0 (possibly [rand() %2])

2. Return value


printTrack()


GOALS: Print the track of one horse


INPUT: horses track to print and current position of that horse


OUTPUT: print track of particular horse




1. look at horse given

2. print "." if horse is not there, i if horse is in that spot. in the spot of the value of horses[i]

3. if horse is past space 14
	a. say this horse wins 
	b. set keepGoing to false so the while loop in main stops running.


______________________________________________
BLACKBELT
______________________________________________


-First change is to make the file run without "using namespace std;" 

-store history of horse races using serialization (csv file... records.csv)

-update values of horses after  after each race

-main() will become race()

-main() will now just call menu



record()  (RAN OUT OF TIME TO IMPLEMENT){

GOALS: Save wins and races of horses in the race

INPUT: array of horses, showing who raced, and winning horse

OUTPUT: Updated records.csv

STEPS:

1)add a win to the number of wins to the horse that won

2)add a race to all horces who raced

3)write and save file

}

menu(){

GOALS: Let user decide what to do

INPUT: a 1 to race, a 2 to see all horse stats, a 3 to quit the game

OUTPUT: will call race or will call stats or wuit game

STEPS:

1) check to make sure input is a 1,2, or 3

2) call race if 1 is entered, call stats if 2 is entered, quit program if 3 is entered. if not understood as one of these ask for input again


}

stats(){

GOALS: Display current stats of all 10 horses in stables

INPUT: records.csv file

OUTPUT:	orderly stats page

STEPS:

1)open file

2) Go through all items for horse 1 and assign them to a struct

3) Go through all horses printing off their stats

}

int selectHorse(){

GOALS: Get the user to select an int in the rancge of 0-9

INPUT: pointer to array of the five selected horses

OUTPUT: Int of a horse available to race in the race

STEPS:

1)ask for user input

2)check to make sure it is an int

3)make sure int is in between 0 and 9

4)make sure this integer horse number is not already selectd be seeing if it is not in the selected horse array

5)return int
}
